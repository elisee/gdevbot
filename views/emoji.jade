extends layout

block title
  | Emoji code

block content
  header.
    A tweet-size scripting language for a tweet-based game making tool.

  style.
    section {
      padding-bottom: 1.5em;
      border-bottom: 1px solid #ccc;
    }

    section > .Icon {
      float: right;
      padding-left: 0.5em;
    }

    pre img { width: 36px; height: 36px; vertical-align: bottom; }
    .TweetPreview img { width: 28px; height: 24px; padding: 0 2px; vertical-align: bottom; }

    section { clear: both; }

    .PlaygroundFlex {
      display: flex;
      margin-top: 1em;
    }

    .EditorContainer {
      flex: 1;
      margin-right: 1em;
    }

    .Playground .Buttons {
      text-align: left;
    }

    .Playground .Buttons img {
      width: 36px;
      height: 36px;
      margin: 0.125em;
      cursor: pointer;
      opacity: 0.6;
    }

    .Playground .Buttons img:hover {
      opacity: 1;
    }

    .Playground textarea {
      width: 100%;
      max-width: 100%;
      min-height: 120px;
      padding: 0.5em;
      outline: none;
    }

    .TweetPreview, .GeneratedScriptPreview {
      min-height: 120px;
      padding: 0.5em;
      border: 1px solid #ccc;
      background: #f5f5f5;
      margin-bottom: 0.25em;
    }

    .GeneratedScriptPreview {
      border-radius: 0;
      margin-top: 0;
      font-size: 75%;
      max-height: 500px;
      overflow-x: scroll;
    }

    .EditorToolbar {
      display: flex;
    }

    #ExampleSelect {
      margin-left: 0.25em;
      flex: 1;
      padding: 0.25em 0.5em;
      border-radius: 0.25em;
      border: 1px solid #ccc;
    }

    #TweetScriptButton, #ExampleSelect, .Playground textarea {
      padding: 0.25em 0.5em;
      font: inherit;
    }

    #TweetScriptButton {
      display: inline-block;
      padding: 0.25em 0.5em;
      text-decoration: none;
      background: #ddd;
      border-radius: 0.25em;
      color: #666;
      font-weight: bold;
      border: 1px solid #ccc;
    }


    #TweetScriptButton:hover {
      background: #dadada;
      color: #444;
    }

    #TweetScriptButton:active {
      background: #ccc;
      color: #fff;
    }

  section.Playground
    .PlaygroundFlex
      .EditorContainer
        textarea(placeholder="Type in here & insert emojis by clicking on the right")
        pre.GeneratedScriptPreview
        .TweetPreview
        .EditorToolbar
          a(href="#")#TweetScriptButton Tweet this script
          |  
          select#ExampleSelect
            option (Pick an example)
            option(value="setPositionOnSunrise") Set actor position on sunrise
            option(value="moveRightwards") Move actor to the right continously
            option(value="moveUpThenStop") Move up then stop
            option(value="dragHorizontally") Drag with finger horizontally

      .Buttons
        div
          != imgEmoji(":sunrise:")
          != imgEmoji(":curly_loop:")

        div
          != imgEmoji(":penguin:")
          != imgEmoji(":baggage_claim:")
          != imgEmoji(":key:")
          != imgEmoji(":scissors:")

        div
          != imgEmoji(":triangular_flag_on_post:")
          != imgEmoji(":car:")
          != imgEmoji(":o:")
          != imgEmoji(":arrows_clockwise:")

        div
          != imgEmoji(":arrow_left_right:")
          != imgEmoji(":arrow_up_down:")

        div
          != imgEmoji(":question:")
          != imgEmoji(":twisted_rightwards_arrows:")
          != imgEmoji(":fast_forward:")
          != imgEmoji(":rewind:")

        div
          != imgEmoji(":hand:")
          != imgEmoji(":wave:")
          != imgEmoji(":point_up_2:")
          != imgEmoji(":point_up:")

        div
          != imgEmoji(":random:")
    script(src="js/beautify.js")
    script(src="js/parseScript.js")
    script(src="js/playground.js")

  section#events
    .Icon
      != imgEmoji(":sunrise:")
      |  
      != imgEmoji(":curly_loop:")
    h2 Init, Once, Always
    
    p.
      By default, your code will be executed a single time as soon as the game is loaded.
      This is useful for global initialization code that isn't linked to any actor.

    p.
      Code located after the sunrise emoji will be executed once for each actor it is attached to,
      when the actor is instantiated or when the script gets attached to it.

    p.
      Code located after the curly loop emoji will be executed every frame for each actor it is attached to.

  section#self
    .Icon
      != imgEmoji(":penguin:")
    h2 Current actor
    
    p.
      A single script can be attached on a multitude of actors.
      The penguin emoji represents the actor the script is currently dealing with.

  section#position
    .Icon
      != imgEmoji(":triangular_flag_on_post:")
      |  
      != imgEmoji(":car:")
    h2 Position, Move
    
    p.
      Use the flag to set or get an actor's position.

    pre
      != imgEmoji(":triangular_flag_on_post:")
      mark
        != imgEmoji(":penguin:")
      |  
      mark 20
      |  
      mark 30

    p.
      Use the car to move an actor by a certain offset.

    pre
      != imgEmoji(":car:")
      mark
        != imgEmoji(":penguin:")
      |  
      mark 10
      |  
      mark -5

  section#angle
    .Icon
      != imgEmoji(":o:")
      |  
      != imgEmoji(":arrows_clockwise:")
    h2 Angle, Rotate

    p.
      Use the circle to set or get an actor's angle.

    pre
      != imgEmoji(":o:")
      mark
        != imgEmoji(":penguin:")
      |  
      mark 45

    p.
      Use the clockwise arrows to rotate an actor.

    pre
      != imgEmoji(":arrows_clockwise:")
      mark
        != imgEmoji(":penguin:")
      |  
      mark 5

  section#sprite
    .Icon
      != imgEmoji(":arrow_left_right:")
      |  
      != imgEmoji(":arrow_up_down:")
    h2 Sprite width &amp; height
    
    p.
      You can get the sprite width and height for your computations.<br>
      For instance, this moves the actor by half its sprite's width:

    pre
      != imgEmoji(":car:")
      != imgEmoji(":penguin:")
      != imgEmoji(":arrow_left_right:")
      != imgEmoji(":penguin:")
      != imgEmoji(":scissors:")
      | / 2 0

  section#properties
    .Icon
      != imgEmoji(":key:")
    h2 Key
    
    p.
      The key lets you access properties of an object.

    p.
      For instance, you can access the x or y component of a position.

    pre
      mark
        != imgEmoji(":triangular_flag_on_post:")
      mark
        != imgEmoji(":penguin:")
      != imgEmoji(":scissors:")
      != imgEmoji(":key:")
      mark
        | x

    p.
      See below for an explanation about the scissors and why they're required.

  section#scissors
    .Icon
      != imgEmoji(":scissors:")
    h2 End of expression

    p.
      Since emoji code doesn't use parentheses to delimit expressions,
      you will sometime need to use the scissors to explicitly mark the end of an expression.

    p.
      If we didn't use the scissors in the Key example above, the code would be interpreted by
      the engine to mean "position of the property x of the actor", instead of "property x
      of the position of the actor".

  section#assignment
    .Icon
      != imgEmoji(":baggage_claim:")
    h2 Assignment
    
    p.
      You can assign values to properties. A value can be any expression and you can use common arithmetic operators.

    pre
      != imgEmoji(":baggage_claim:")
      mark
        != imgEmoji(":penguin:")
      != imgEmoji(":key:")
      |  
      mark prop
      |  
      mark 5

    p.
      You can also use the key on its own to assign (and read) global variables:

    pre
      != imgEmoji(":baggage_claim:")
      != imgEmoji(":key:")
      |  
      mark myGlobal
      |  
      mark 1
 
  section#conditions
    .Icon
      != imgEmoji(":question:")
      != imgEmoji(":twisted_rightwards_arrows:")
    h2 Conditions

    p.
      Only execute the statement right after if the condition turns out to be true.

    pre
      != imgEmoji(":question:")
      mark condition
      |  
      mark statement

    p.
      You can use common comparison operators like &lt; ≤ = ≥ &gt; ≠.

    p.
      You can negate an expression (make something truthy false and vice versa) with the twisted arrows:

    pre
      != imgEmoji(":twisted_rightwards_arrows:")
      mark expression

  section#blocks
    .Icon
      != imgEmoji(":fast_forward:")
      |  
      != imgEmoji(":rewind:")
    h2 Code blocks

    p.
      Group statements that should be affected by a condition. Or just because it's pretty.

  section#input
    .Icon
      != imgEmoji(":hand:")
      |  
      != imgEmoji(":wave:")
      | 
      != imgEmoji(":point_up_2:")
      |  
      != imgEmoji(":point_up:")
    h2 Touch input

    p.
      The hand represents the touch position on touch devices,
      or the mouse position while the left button is pressed on other devices.

    p.
      You can use it to make an actor follow your pointer:

    pre
      != imgEmoji(":curly_loop:")
      != imgEmoji(":triangular_flag_on_post:")
      != imgEmoji(":penguin:")
      != imgEmoji(":hand:")
      != imgEmoji(":key:")
      | x
      != imgEmoji(":hand:")
      != imgEmoji(":key:")
      | y

    p.
      The waving hand represents the movement of the finger/pointing device
      that happened between the previous frame and the current one.

    p.
      You can use it to drag an actor with your pointer:

    pre
      != imgEmoji(":curly_loop:")
      != imgEmoji(":car:")
      != imgEmoji(":penguin:")
      != imgEmoji(":wave:")
      != imgEmoji(":key:")
      | x
      != imgEmoji(":wave:")
      != imgEmoji(":key:")
      | y

    p.
      The pointing fingers stand for start and end of a touch or mouse click.<br>
      You can use them in condition to react to those events.

    p.
      For instance, this moves the actor to where the finger is pointing
      when a touch starts.

    pre
      != imgEmoji(":curly_loop:")
      != imgEmoji(":question:")
      != imgEmoji(":point_up_2:")
      != imgEmoji(":triangular_flag_on_post:")
      != imgEmoji(":penguin:")
      != imgEmoji(":hand:")
      != imgEmoji(":key:")
      | x
      != imgEmoji(":hand:")
      != imgEmoji(":key:")
      | y

  section#random
    .Icon
      != imgEmoji(":random:")
    h2 Random number generator

    p.
      The die lets you generate a random number.<br>
      There are two ways to use it.

    p.
      Put two numerical expressions right after it and it will generate
      a random integer between those two numbers (boundaries included).

    pre
      != imgEmoji(":random:")
      mark 1
      |  
      mark 6

    p.
      If instead you pass no values (using a pair of pair of scissors), it will return a floating-point number
      between 0 and 1.

    pre
      != imgEmoji(":random:")
      != imgEmoji(":scissors:")
      != imgEmoji(":scissors:")
